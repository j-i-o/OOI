
EJERCICIO X

--------

CLASES
METODOS
-----DE INSTANCIA
-----DE CLASE

PLAYGROUND

EJERCICIO 1

1)  En la clase Magnitude
2)  En la clase Magnitude, pero estan overriden en algunas clases
3)  No, ninguno de los dos por ser subclases de Magnitude

EJERCICIO 2

1)  newDay:month:year: (dia:= Date newDay: 29 month: 06 year: 1986)
2)  dia between: 29/06/1986 and: 29/06/2018
3)  
CLASES

Object subclass: #DateLapse
	instanceVariableNames: 'to from'
	classVariableNames: ''
	package: 'Objetos1-DateLapse'

METODOS
-----DE INSTANCIA

from
	^ from

to
	^ to.

from: aDate to: anotherDate
	"inicializa el receptor representando el intervalo cerrado comprendido por aDate y anotherDate"
		from:= aDate.
		to:= anotherDate.

includesDate: aDate
	^ aDate between: from and: to 
  
sizeInDays
	^to subtractDate: from

-----DE CLASE

new
	"Retorna error ya que una instancia de DateLapse debe crearse con el mensaje de clase #from:to:"
	^ self error: 'A DateLapse must be created with the message #from:to:'
  
from: aDate to: anotherDate
	"Crea un DateLapse que abarca el intervalo cerrado comprendido entre aDate y anotherDate."
	^ super new from: aDate to: anotherDate

--------

CLASES

Object subclass: #DelaunayElement
	instanceVariableNames: 'vertex1 vertex2 vertex3'
	classVariableNames: ''
	package: 'Objetos'

METODOS
-----DE INSTANCIA
area
	|s|
	s:= self perimeter / 2.
	^ (s * (s - vertex1 distanceTo: vertex2) * (s - vertex2 distanceTo: vertex3) * (s - vertex3 distanceTo: vertex1)) sqrt
	
isNeighborElement: anObject
	^ (self sameAs: anObject) not and: (self shareSide: anObject).
	
isVertex: aPoint
	^(aPoint = vertex1 or: (aPoint = vertex2 or: aPoint = vertex3))
	
perimeter
	|d1 d2 d3|
	d1:= vertex1 distanceTo: vertex2.
	d2:= vertex2 distanceTo: vertex3.
	d3:= vertex3 distanceTo: vertex1.
	^d1 + d2 + d3
	
sameAs: anObject
	^(vertex1 = anObject vertex1 and: (vertex2 = anObject vertex2 and: vertex3 = anObject vertex3))
	
shareSide: anObject
	(vertex1 = anObject vertex1 or: (vertex1 = anObject vertex2 or: vertex1 = anObject vertex3)) ifFalse: [ 
		(vertex2 = anObject vertex1 or: (vertex2 = anObject vertex2 or: vertex2 = anObject vertex3)) ifFalse: [ ^ false ] 
		 		ifTrue: [ 
			^(vertex3 = anObject vertex1 or: (vertex3 = anObject vertex2 or: vertex3 = anObject vertex3)) 
			 ]
		]
		ifTrue: [ 
			(vertex2 = anObject vertex1 or: (vertex2 = anObject vertex2 or: vertex2 = anObject vertex3)) ifTrue: [ 
				^true
				 ]
			ifFalse: [ 
				^(vertex3 = anObject vertex1 or: (vertex3 = anObject vertex2 or: vertex3 = anObject vertex3)) 
				 ] 
			 ]
Getters y Setters

-----DE CLASE

withPointsP1: p1 p2: p2 p3: p3
	^ self new 
		vertex1: p1;
		vertex2: p2;
		vertex3: p3;
		yourself

PLAYGROUND

t1:= DelaunayElement withPointsP1: 1@1 p2: 1@2 p3: 2@2.
t2:= DelaunayElement withPointsP1: 1@2 p2: 2@2 p3: 1@3.
t3:= DelaunayElement withPointsP1: 3@3 p2: 3@1 p3: 2@2.  

t1 perimeter.
t1 area.
t1 sameAs: t3.
t1 isVertex: 1@3.
t1 shareSide: t2.
t1 isNeighborElement: t3.
